#!/usr/bin/env node

/*
 *  Generates a UUID and prints it to the console
 *
 *  Usage:
 *     $ uuid
 *       48e541a0-adcc-4dce-bcf1-ebc7b28c95d0
 */

function Switch (lowercaseLetter) { // eslint-disable-line no-unused-vars
  return { switch: `-${lowercaseLetter}`.toUpperCase() }
}
function Swatch (name) { // eslint-disable-line no-unused-vars
  return { swatch: `--${name}`.toUpperCase() }
}
function Option (lowercaseLetter, name) {
  return {
    switch: `-${lowercaseLetter}`.toUpperCase(),
    option: `--${name}`.toUpperCase()
  }
}

const findMatch = (switchesOrOptions, argValue, idx, args) => {
  const target = switchesOrOptions
  const _argValue = argValue.trim().toUpperCase()

  if (
    target.option &&
    args.length >= idx + 2 && ( // length is 1 based, and idx is 0 based so add 2
      target.option === _argValue ||
      target.switch === _argValue
    )
  ) {
    return args[idx + 1]
  } else if (target.swatch === _argValue || target.option === _argValue) {
    return true
  } else if (target.switch === _argValue) {
    return true
  }

  return false
}

let length = 0
let useHyphens = true
let useUpper = false
let prefix = ''

process.argv.forEach((value, idx, args) => {
  const harg = findMatch(Option('h', 'no-hyphens'), value, idx, args)
  const larg = findMatch(Option('l', 'length'), value, idx, args)
  const parg = findMatch(Option('p', 'prefix'), value, idx, args)
  const uarg = findMatch(Option('u', 'upper'), value, idx, args)

  if (harg) useHyphens = false

  if (larg) {
    const l = parseInt(larg)
    if (!isNaN(l)) length = l
  }

  if (parg) prefix = parg

  if (uarg) useUpper = true

  if (value === 'help') {
    console.log(`
-h, --no-hyphens  print a uuid without hyphens
-l, --length      print a random id of the given length (the next arg: \`uuid -l 8\`)
-p, --prefix      prepend the id with the given prefix (the next arg: \`uuid -p MYPREFIX-\`)
-u, --upper       print the id in upper case
    `)

    process.exit(0)
  }
})

const createRandomString = function (templateString) {
  return templateString.replace(/[xy]/g, function (c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : r & 3 | 8;

    return v.toString(16);
  })
}

const uuid = () => createRandomString('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx')
const uuidSansHyphens = () => createRandomString('xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx')
const randomId = (length) => createRandomString(new Array(length + 1).join('x'))

let id

if (length) {
  id = randomId(length)
} else if (useHyphens) {
  id = uuid()
} else {
  id = uuidSansHyphens()
}

if (useUpper) {
  console.log(`${prefix}${id.toUpperCase()}`)
} else {
  console.log(`${prefix}${id}`)
}
